datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Vote {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  timestamp   DateTime?
  voter       Voter?     @relation(fields: [voterId], references: [id])
  voterId     String?    @db.ObjectId
  candidate   Candidate? @relation(fields: [candidateId], references: [id])
  candidateId String?    @db.ObjectId
  election    Election?  @relation(fields: [electionId], references: [id])
  electionId  String?    @db.ObjectId
}

model Candidate {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  voteCount  Int?
  name       String?
  votes      Vote[]
  election   Election? @relation(fields: [electionId], references: [id])
  electionId String?   @db.ObjectId
}

model Voter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  walletAddress String?
  email         String?
  hasVoted      Boolean?
  votes         Vote[]
}

model Election {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  title      String?
  startDate  DateTime?
  endDate    DateTime?
  isActive   Boolean?
  votes      Vote[]
  candidates Candidate[]
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  username  String   @unique
  email     String?  @unique
  password  String
  roles     Json
}

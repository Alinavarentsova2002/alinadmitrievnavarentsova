/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Election } from "./Election";
import { ElectionCountArgs } from "./ElectionCountArgs";
import { ElectionFindManyArgs } from "./ElectionFindManyArgs";
import { ElectionFindUniqueArgs } from "./ElectionFindUniqueArgs";
import { CreateElectionArgs } from "./CreateElectionArgs";
import { UpdateElectionArgs } from "./UpdateElectionArgs";
import { DeleteElectionArgs } from "./DeleteElectionArgs";
import { VoteFindManyArgs } from "../../vote/base/VoteFindManyArgs";
import { Vote } from "../../vote/base/Vote";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { ElectionService } from "../election.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Election)
export class ElectionResolverBase {
  constructor(
    protected readonly service: ElectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "read",
    possession: "any",
  })
  async _electionsMeta(
    @graphql.Args() args: ElectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Election])
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "read",
    possession: "any",
  })
  async elections(
    @graphql.Args() args: ElectionFindManyArgs
  ): Promise<Election[]> {
    return this.service.elections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Election, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "read",
    possession: "own",
  })
  async election(
    @graphql.Args() args: ElectionFindUniqueArgs
  ): Promise<Election | null> {
    const result = await this.service.election(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Election)
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "create",
    possession: "any",
  })
  async createElection(
    @graphql.Args() args: CreateElectionArgs
  ): Promise<Election> {
    return await this.service.createElection({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Election)
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "update",
    possession: "any",
  })
  async updateElection(
    @graphql.Args() args: UpdateElectionArgs
  ): Promise<Election | null> {
    try {
      return await this.service.updateElection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Election)
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "delete",
    possession: "any",
  })
  async deleteElection(
    @graphql.Args() args: DeleteElectionArgs
  ): Promise<Election | null> {
    try {
      return await this.service.deleteElection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Vote], { name: "votes" })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async findVotes(
    @graphql.Parent() parent: Election,
    @graphql.Args() args: VoteFindManyArgs
  ): Promise<Vote[]> {
    const results = await this.service.findVotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Candidate], { name: "candidates" })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async findCandidates(
    @graphql.Parent() parent: Election,
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    const results = await this.service.findCandidates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

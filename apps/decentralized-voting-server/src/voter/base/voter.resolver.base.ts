/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Voter } from "./Voter";
import { VoterCountArgs } from "./VoterCountArgs";
import { VoterFindManyArgs } from "./VoterFindManyArgs";
import { VoterFindUniqueArgs } from "./VoterFindUniqueArgs";
import { CreateVoterArgs } from "./CreateVoterArgs";
import { UpdateVoterArgs } from "./UpdateVoterArgs";
import { DeleteVoterArgs } from "./DeleteVoterArgs";
import { VoteFindManyArgs } from "../../vote/base/VoteFindManyArgs";
import { Vote } from "../../vote/base/Vote";
import { VoterService } from "../voter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Voter)
export class VoterResolverBase {
  constructor(
    protected readonly service: VoterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "any",
  })
  async _votersMeta(
    @graphql.Args() args: VoterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Voter])
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "any",
  })
  async voters(@graphql.Args() args: VoterFindManyArgs): Promise<Voter[]> {
    return this.service.voters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Voter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "own",
  })
  async voter(
    @graphql.Args() args: VoterFindUniqueArgs
  ): Promise<Voter | null> {
    const result = await this.service.voter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Voter)
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "create",
    possession: "any",
  })
  async createVoter(@graphql.Args() args: CreateVoterArgs): Promise<Voter> {
    return await this.service.createVoter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Voter)
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "update",
    possession: "any",
  })
  async updateVoter(
    @graphql.Args() args: UpdateVoterArgs
  ): Promise<Voter | null> {
    try {
      return await this.service.updateVoter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Voter)
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "delete",
    possession: "any",
  })
  async deleteVoter(
    @graphql.Args() args: DeleteVoterArgs
  ): Promise<Voter | null> {
    try {
      return await this.service.deleteVoter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Vote], { name: "votes" })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async findVotes(
    @graphql.Parent() parent: Voter,
    @graphql.Args() args: VoteFindManyArgs
  ): Promise<Vote[]> {
    const results = await this.service.findVotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoterService } from "../voter.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoterCreateInput } from "./VoterCreateInput";
import { Voter } from "./Voter";
import { VoterFindManyArgs } from "./VoterFindManyArgs";
import { VoterWhereUniqueInput } from "./VoterWhereUniqueInput";
import { VoterUpdateInput } from "./VoterUpdateInput";
import { VoteFindManyArgs } from "../../vote/base/VoteFindManyArgs";
import { Vote } from "../../vote/base/Vote";
import { VoteWhereUniqueInput } from "../../vote/base/VoteWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoterControllerBase {
  constructor(
    protected readonly service: VoterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Voter })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoter(@common.Body() data: VoterCreateInput): Promise<Voter> {
    return await this.service.createVoter({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        walletAddress: true,
        email: true,
        hasVoted: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Voter] })
  @ApiNestedQuery(VoterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voters(@common.Req() request: Request): Promise<Voter[]> {
    const args = plainToClass(VoterFindManyArgs, request.query);
    return this.service.voters({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        walletAddress: true,
        email: true,
        hasVoted: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Voter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voter(
    @common.Param() params: VoterWhereUniqueInput
  ): Promise<Voter | null> {
    const result = await this.service.voter({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        walletAddress: true,
        email: true,
        hasVoted: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Voter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoter(
    @common.Param() params: VoterWhereUniqueInput,
    @common.Body() data: VoterUpdateInput
  ): Promise<Voter | null> {
    try {
      return await this.service.updateVoter({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          walletAddress: true,
          email: true,
          hasVoted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Voter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoter(
    @common.Param() params: VoterWhereUniqueInput
  ): Promise<Voter | null> {
    try {
      return await this.service.deleteVoter({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          walletAddress: true,
          email: true,
          hasVoted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/votes")
  @ApiNestedQuery(VoteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async findVotes(
    @common.Req() request: Request,
    @common.Param() params: VoterWhereUniqueInput
  ): Promise<Vote[]> {
    const query = plainToClass(VoteFindManyArgs, request.query);
    const results = await this.service.findVotes(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        voter: {
          select: {
            id: true,
          },
        },

        candidate: {
          select: {
            id: true,
          },
        },

        election: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/votes")
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "update",
    possession: "any",
  })
  async connectVotes(
    @common.Param() params: VoterWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        connect: body,
      },
    };
    await this.service.updateVoter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/votes")
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "update",
    possession: "any",
  })
  async updateVotes(
    @common.Param() params: VoterWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        set: body,
      },
    };
    await this.service.updateVoter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/votes")
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "update",
    possession: "any",
  })
  async disconnectVotes(
    @common.Param() params: VoterWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        disconnect: body,
      },
    };
    await this.service.updateVoter({
      where: params,
      data,
      select: { id: true },
    });
  }
}

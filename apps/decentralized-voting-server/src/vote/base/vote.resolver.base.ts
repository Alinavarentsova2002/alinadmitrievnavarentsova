/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Vote } from "./Vote";
import { VoteCountArgs } from "./VoteCountArgs";
import { VoteFindManyArgs } from "./VoteFindManyArgs";
import { VoteFindUniqueArgs } from "./VoteFindUniqueArgs";
import { CreateVoteArgs } from "./CreateVoteArgs";
import { UpdateVoteArgs } from "./UpdateVoteArgs";
import { DeleteVoteArgs } from "./DeleteVoteArgs";
import { Voter } from "../../voter/base/Voter";
import { Candidate } from "../../candidate/base/Candidate";
import { Election } from "../../election/base/Election";
import { VoteService } from "../vote.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vote)
export class VoteResolverBase {
  constructor(
    protected readonly service: VoteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async _votesMeta(
    @graphql.Args() args: VoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vote])
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async votes(@graphql.Args() args: VoteFindManyArgs): Promise<Vote[]> {
    return this.service.votes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vote, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "own",
  })
  async vote(@graphql.Args() args: VoteFindUniqueArgs): Promise<Vote | null> {
    const result = await this.service.vote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vote)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "create",
    possession: "any",
  })
  async createVote(@graphql.Args() args: CreateVoteArgs): Promise<Vote> {
    return await this.service.createVote({
      ...args,
      data: {
        ...args.data,

        voter: args.data.voter
          ? {
              connect: args.data.voter,
            }
          : undefined,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,

        election: args.data.election
          ? {
              connect: args.data.election,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vote)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "update",
    possession: "any",
  })
  async updateVote(@graphql.Args() args: UpdateVoteArgs): Promise<Vote | null> {
    try {
      return await this.service.updateVote({
        ...args,
        data: {
          ...args.data,

          voter: args.data.voter
            ? {
                connect: args.data.voter,
              }
            : undefined,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,

          election: args.data.election
            ? {
                connect: args.data.election,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vote)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "delete",
    possession: "any",
  })
  async deleteVote(@graphql.Args() args: DeleteVoteArgs): Promise<Vote | null> {
    try {
      return await this.service.deleteVote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Voter, {
    nullable: true,
    name: "voter",
  })
  @nestAccessControl.UseRoles({
    resource: "Voter",
    action: "read",
    possession: "any",
  })
  async getVoter(@graphql.Parent() parent: Vote): Promise<Voter | null> {
    const result = await this.service.getVoter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  @nestAccessControl.UseRoles({
    resource: "Candidate",
    action: "read",
    possession: "any",
  })
  async getCandidate(
    @graphql.Parent() parent: Vote
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Election, {
    nullable: true,
    name: "election",
  })
  @nestAccessControl.UseRoles({
    resource: "Election",
    action: "read",
    possession: "any",
  })
  async getElection(@graphql.Parent() parent: Vote): Promise<Election | null> {
    const result = await this.service.getElection(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
